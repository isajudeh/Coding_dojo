Microsoft Windows [Version 10.0.19043.2006]
(c) Microsoft Corporation. All rights reserved.

C:\Users\LENOVO\Desktop\Coding_dojo\CodingDojo\python_stack\django\Dojo & Ninjas (Shell)>django manage.py startproject Dojo_Ninjas
'django' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\LENOVO\Desktop\Coding_dojo\CodingDojo\python_stack\django\Dojo & Ninjas (Shell)>django-admin startproject Dojo_Ninjas

C:\Users\LENOVO\Desktop\Coding_dojo\CodingDojo\python_stack\django\Dojo & Ninjas (Shell)>cd Dojo_Ninjas

C:\Users\LENOVO\Desktop\Coding_dojo\CodingDojo\python_stack\django\Dojo & Ninjas (Shell)\Dojo_Ninjas>code .

C:\Users\LENOVO\Desktop\Coding_dojo\CodingDojo\python_stack\django\Dojo & Ninjas (Shell)\Dojo_Ninjas>python manage.py startapp first_app

C:\Users\LENOVO\Desktop\Coding_dojo\CodingDojo\python_stack\django\Dojo & Ninjas (Shell)\Dojo_Ninjas>python manage.py makemigrations
Migrations for 'first_app':
  first_app\migrations\0001_initial.py
    - Create model Dojo
    - Create model Ninja

C:\Users\LENOVO\Desktop\Coding_dojo\CodingDojo\python_stack\django\Dojo & Ninjas (Shell)\Dojo_Ninjas> python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, first_app, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying first_app.0001_initial... OK
  Applying sessions.0001_initial... OK

C:\Users\LENOVO\Desktop\Coding_dojo\CodingDojo\python_stack\django\Dojo & Ninjas (Shell)\Dojo_Ninjas>python manage.py shell
Python 3.10.5 (tags/v3.10.5:f377153, Jun  6 2022, 16:14:13) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from first
  File "<console>", line 1
    from first
              ^
SyntaxError: invalid syntax
>>> from first_app
  File "<console>", line 1
    from first_app
                  ^
SyntaxError: invalid syntax
>>> from first_app.models import
  File "<console>", line 1
    from first_app.models import
                                 ^
SyntaxError: invalid syntax
>>>
>>>
>>>
>>>
>>> from first_app.models import *
>>> raed=Dojo.objects.create(name="raed",city="ramallah",state="NA")
>>> isa=Dojo.objects.create(name="ISA",city="Ramallah",state="PS")
>>> yousef=Dojo.objects.create(name="YOUSEF",city="Ramallah",state="PS")
>>> Dojo.objects.all()
<QuerySet [<Dojo: Dojo object (1)>, <Dojo: Dojo object (2)>, <Dojo: Dojo object (3)>]>
>>> Dojo.objects.all().values()
<QuerySet [{'id': 1, 'name': 'raed', 'city': 'ramallah', 'state': 'NA', 'created_at': datetime.datetime(2022, 9, 26, 8, 33, 36, 729168, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 33, 36, 729168, tzinfo=<UTC>)}, {'id': 2, 'name': 'ISA', 'city': 'Ramallah', 'state': 'PS', 'created_at': datetime.datetime(2022, 9, 26, 8, 34, 45, 89153, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 34, 45, 89153, tzinfo=<UTC>)}, {'id': 3, 'name': 'YOUSEF', 'city': 'Ramallah', 'state': 'PS', 'created_at': datetime.datetime(2022, 9, 26, 8, 35, 15, 610330, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 35, 15, 610330, tzinfo=<UTC>)}]>
>>> isa.delete()
(1, {'first_app.Ninja': 0, 'first_app.Dojo': 1})
>>> Dojo.objects.all().values()
<QuerySet [{'id': 1, 'name': 'raed', 'city': 'ramallah', 'state': 'NA', 'created_at': datetime.datetime(2022, 9, 26, 8, 33, 36, 729168, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 33, 36, 729168, tzinfo=<UTC>)}, {'id': 3, 'name': 'YOUSEF', 'city': 'Ramallah', 'state': 'PS', 'created_at': datetime.datetime(2022, 9, 26, 8, 35, 15, 610330, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 35, 15, 610330, tzinfo=<UTC>)}]>
>>> yousef.delete()
(1, {'first_app.Ninja': 0, 'first_app.Dojo': 1})
>>> raed.delete()
(1, {'first_app.Ninja': 0, 'first_app.Dojo': 1})
>>> Dojo.objects.all().values()
<QuerySet []>
>>> raed=Dojo.objects.create(name="raed",city="ramallah",state="NA")
>>> isa=Dojo.objects.create(name="ISA",city="Ramallah",state="PS")
>>> yousef=Dojo.objects.create(name="YOUSEF",city="Ramallah",state="PS")
>>> ninja1=Ninja.objects.create(first_name="ahmad",last_name="soso",dojo=isa)
>>>
>>> ninja2=Ninja.objects.create(first_name="LOLO",last_name="KOKO",dojo=isa)
>>> ninja3=Ninja.objects.create(first_name="POPO",last_name="TOTO",dojo=isa)
>>> Ninja.objects.all().values()
<QuerySet [{'id': 1, 'first_name': 'ahmad', 'last_name': 'soso', 'dojo_id': 5, 'created_at': datetime.datetime(2022, 9, 26, 8, 39, 34, 209181, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 39, 34, 209181, tzinfo=<UTC>)}, {'id': 2, 'first_name': 'LOLO', 'last_name': 'KOKO', 'dojo_id': 5, 'created_at': datetime.datetime(2022, 9, 26, 8, 43, 15, 838147, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 43, 15, 838147, tzinfo=<UTC>)}, {'id': 3, 'first_name': 'POPO', 'last_name': 'TOTO', 'dojo_id': 5, 'created_at': datetime.datetime(2022, 9, 26, 8, 43, 39, 195903, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 43, 39, 195903, tzinfo=<UTC>)}]>
>>> ninja11=Ninja.objects.create(first_name="POPO",last_name="TOTO",dojo=raed)
>>> ninja12=Ninja.objects.create(first_name="POPO",last_name="TOTO",dojo=raed)
>>> ninja13=Ninja.objects.create(first_name="POPO",last_name="TOTO",dojo=raed)
>>> Ninja.objects.all().values()
<QuerySet [{'id': 1, 'first_name': 'ahmad', 'last_name': 'soso', 'dojo_id': 5, 'created_at': datetime.datetime(2022, 9, 26, 8, 39, 34, 209181, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 39, 34, 209181, tzinfo=<UTC>)}, {'id': 2, 'first_name': 'LOLO', 'last_name': 'KOKO', 'dojo_id': 5, 'created_at': datetime.datetime(2022, 9, 26, 8, 43, 15, 838147, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 43, 15, 838147, tzinfo=<UTC>)}, {'id': 3, 'first_name': 'POPO', 'last_name': 'TOTO', 'dojo_id': 5, 'created_at': datetime.datetime(2022, 9, 26, 8, 43, 39, 195903, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 43, 39, 195903, tzinfo=<UTC>)}, {'id': 4, 'first_name': 'POPO', 'last_name': 'TOTO', 'dojo_id': 4, 'created_at': datetime.datetime(2022, 9, 26, 8, 45, 41, 452800, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 45, 41, 452800, tzinfo=<UTC>)}, {'id': 5, 'first_name': 'POPO', 'last_name': 'TOTO', 'dojo_id': 4, 'created_at': datetime.datetime(2022, 9, 26, 8, 45, 49, 913290, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 45, 49, 913290, tzinfo=<UTC>)}, {'id': 6, 'first_name': 'POPO', 'last_name': 'TOTO', 'dojo_id': 4, 'created_at': datetime.datetime(2022, 9, 26, 8, 45, 58, 486972, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 45, 58, 486972, tzinfo=<UTC>)}]>
>>> ninja31=Ninja.objects.create(first_name="POPO",last_name="TOTO",dojo=yousef)
>>> ninja32=Ninja.objects.create(first_name="POPO",last_name="TOTO",dojo=yousef)
>>> ninja33=Ninja.objects.create(first_name="POPO",last_name="TOTO",dojo=yousef)
>>> Ninja.objects.all().values()
<QuerySet [{'id': 1, 'first_name': 'ahmad', 'last_name': 'soso', 'dojo_id': 5, 'created_at': datetime.datetime(2022, 9, 26, 8, 39, 34, 209181, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 39, 34, 209181, tzinfo=<UTC>)}, {'id': 2, 'first_name': 'LOLO', 'last_name': 'KOKO', 'dojo_id': 5, 'created_at': datetime.datetime(2022, 9, 26, 8, 43, 15, 838147, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 43, 15, 838147, tzinfo=<UTC>)}, {'id': 3, 'first_name': 'POPO', 'last_name': 'TOTO', 'dojo_id': 5, 'created_at': datetime.datetime(2022, 9, 26, 8, 43, 39, 195903, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 43, 39, 195903, tzinfo=<UTC>)}, {'id': 4, 'first_name': 'POPO', 'last_name': 'TOTO', 'dojo_id': 4, 'created_at': datetime.datetime(2022, 9, 26, 8, 45, 41, 452800, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 45, 41, 452800, tzinfo=<UTC>)}, {'id': 5, 'first_name': 'POPO', 'last_name': 'TOTO', 'dojo_id': 4, 'created_at': datetime.datetime(2022, 9, 26, 8, 45, 49, 913290, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 45, 49, 913290, tzinfo=<UTC>)}, {'id': 6, 'first_name': 'POPO', 'last_name': 'TOTO', 'dojo_id': 4, 'created_at': datetime.datetime(2022, 9, 26, 8, 45, 58, 486972, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 45, 58, 486972, tzinfo=<UTC>)}, {'id': 7, 'first_name': 'POPO', 'last_name': 'TOTO', 'dojo_id': 6, 'created_at': datetime.datetime(2022, 9, 26, 8, 46, 33, 289737, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 46, 33, 289737, tzinfo=<UTC>)}, {'id': 8, 'first_name': 'POPO', 'last_name': 'TOTO', 'dojo_id': 6, 'created_at': datetime.datetime(2022, 9, 26, 8, 46, 40, 435280, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 46, 40, 435280, tzinfo=<UTC>)}, {'id': 9, 'first_name': 'POPO', 'last_name': 'TOTO', 'dojo_id': 6, 'created_at': datetime.datetime(2022, 9, 26, 8, 46, 48, 445287, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 46, 48, 445287, tzinfo=<UTC>)}]>
>>> Ninja.objects.get(isa).values()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\query.py", line 399, in get
    clone = self.filter(*args, **kwargs)
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\query.py", line 892, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\query.py", line 910, in _filter_or_exclude
    clone.query.add_q(Q(*args, **kwargs))
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\sql\query.py", line 1290, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\sql\query.py", line 1315, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\sql\query.py", line 1187, in build_filter
    arg, value = filter_expr
TypeError: cannot unpack non-iterable Dojo object
>>> Ninja.objects.get(id=isa).values()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\query.py", line 399, in get
    clone = self.filter(*args, **kwargs)
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\query.py", line 892, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\query.py", line 910, in _filter_or_exclude
    clone.query.add_q(Q(*args, **kwargs))
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\sql\query.py", line 1290, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\sql\query.py", line 1315, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\sql\query.py", line 1251, in build_filter
    condition = self.build_lookup(lookups, col, value)
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\sql\query.py", line 1116, in build_lookup
    lookup = lookup_class(lhs, rhs)
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\lookups.py", line 20, in __init__
    self.rhs = self.get_prep_lookup()
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\lookups.py", line 70, in get_prep_lookup
    return self.lhs.output_field.get_prep_value(self.rhs)
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\fields\__init__.py", line 966, in get_prep_value
    return int(value)
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'Dojo'
>>> Ninja.objects.get(Dojo=isa).values()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\query.py", line 399, in get
    clone = self.filter(*args, **kwargs)
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\query.py", line 892, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\query.py", line 910, in _filter_or_exclude
    clone.query.add_q(Q(*args, **kwargs))
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\sql\query.py", line 1290, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\sql\query.py", line 1315, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\sql\query.py", line 1190, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg)
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\sql\query.py", line 1049, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "C:\Users\LENOVO\AppData\Local\Programs\Python\Python310\lib\site-packages\django\db\models\sql\query.py", line 1419, in names_to_path
    raise FieldError("Cannot resolve keyword '%s' into field. "
django.core.exceptions.FieldError: Cannot resolve keyword 'Dojo' into field. Choices are: created_at, dojo, dojo_id, first_name, id, last_name, updated_at
>>> Ninja.objects.filter(dojo=yousef).values()
<QuerySet [{'id': 7, 'first_name': 'POPO', 'last_name': 'TOTO', 'dojo_id': 6, 'created_at': datetime.datetime(2022, 9, 26, 8, 46, 33, 289737, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 46, 33, 289737, tzinfo=<UTC>)}, {'id': 8, 'first_name': 'POPO', 'last_name': 'TOTO', 'dojo_id': 6, 'created_at': datetime.datetime(2022, 9, 26, 8, 46, 40, 435280, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 46, 40, 435280, tzinfo=<UTC>)}, {'id': 9, 'first_name': 'POPO', 'last_name': 'TOTO', 'dojo_id': 6, 'created_at': datetime.datetime(2022, 9, 26, 8, 46, 48, 445287, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 46, 48, 445287, tzinfo=<UTC>)}]>
>>> Ninja.objects.filter(dojo=isa).values()
<QuerySet [{'id': 1, 'first_name': 'ahmad', 'last_name': 'soso', 'dojo_id': 5, 'created_at': datetime.datetime(2022, 9, 26, 8, 39, 34, 209181, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 39, 34, 209181, tzinfo=<UTC>)}, {'id': 2, 'first_name': 'LOLO', 'last_name': 'KOKO', 'dojo_id': 5, 'created_at': datetime.datetime(2022, 9, 26, 8, 43, 15, 838147, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 43, 15, 838147, tzinfo=<UTC>)}, {'id': 3, 'first_name': 'POPO', 'last_name': 'TOTO', 'dojo_id': 5, 'created_at': datetime.datetime(2022, 9, 26, 8, 43, 39, 195903, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 43, 39, 195903, tzinfo=<UTC>)}]>
>>> Ninja.objects.filter(dojo=isa).values()
<QuerySet [{'id': 1, 'first_name': 'ahmad', 'last_name': 'soso', 'dojo_id': 5, 'created_at': datetime.datetime(2022, 9, 26, 8, 39, 34, 209181, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 39, 34, 209181, tzinfo=<UTC>)}, {'id': 2, 'first_name': 'LOLO', 'last_name': 'KOKO', 'dojo_id': 5, 'created_at': datetime.datetime(2022, 9, 26, 8, 43, 15, 838147, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 43, 15, 838147, tzinfo=<UTC>)}, {'id': 3, 'first_name': 'POPO', 'last_name': 'TOTO', 'dojo_id': 5, 'created_at': datetime.datetime(2022, 9, 26, 8, 43, 39, 195903, tzinfo=<UTC>), 'updated_at': datetime.datetime(2022, 9, 26, 8, 43, 39, 195903, tzinfo=<UTC>)}]>
>>> exit()

C:\Users\LENOVO\Desktop\Coding_dojo\CodingDojo\python_stack\django\Dojo & Ninjas (Shell)\Dojo_Ninjas>python manage.py makemigrations
You are trying to add a non-nullable field 'desc' to dojo without a default; we can't do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py
Select an option: 1
Please enter the default value now, as valid Python
The datetime and django.utils.timezone modules are available, so you can do e.g. timezone.now
Type 'exit' to exit this prompt
>>> "no value"
Migrations for 'first_app':
  first_app\migrations\0002_dojo_desc.py
    - Add field desc to dojo

C:\Users\LENOVO\Desktop\Coding_dojo\CodingDojo\python_stack\django\Dojo & Ninjas (Shell)\Dojo_Ninjas> python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, first_app, sessions
Running migrations:
  Applying first_app.0002_dojo_desc... OK

C:\Users\LENOVO\Desktop\Coding_dojo\CodingDojo\python_stack\django\Dojo & Ninjas (Shell)\Dojo_Ninjas>python manage.py shell
Python 3.10.5 (tags/v3.10.5:f377153, Jun  6 2022, 16:14:13) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> Ninja.objects.filter(dojo=isa).values()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Ninja' is not defined
>>> from first_app.models import *
>>>